(* Lexer para Gramática No. 2 - Expresiones aritméticas extendidas *)

(* Lexer para Gramática No. 2 - Expresiones aritméticas extendidas *)

(* Introducir cualquier header aqui *)

let delim = ["\s\t\n"]
let WS = delim+
let letter = ['A'-'Z''a'-'z']
let digit = ['0'-'9']
let digits = digit+
let ID = letter(letter|digit)*
let NUMBER = digits(.digits)?('E'['+''-']?digits)?
let PLUS = ['+']
let TIMES = ['*']
let LPAREN = ['(']
let RPAREN = [')']
let MINUS = ['-']
let DIV = ['/']

rule tokens = 
    WS        { return WHITESPACE }               (* Cambie por una acción válida, que devuelva el token *)
  | ID        { return ID }
  | NUMBER    { return NUMBER }
  | PLUS       { return PLUS }
  | MINUS       { return MINUS }
  | TIMES       { return TIMES }
  | DIV       { return DIV }
  | LPAREN       { return LPAREN }
  | RPAREN       { return RPAREN }

(* Introducir cualquier trailer aqui *)